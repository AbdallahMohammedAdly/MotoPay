@page
@model AutoLease.Web.Pages.Cars.BrandShowcaseModel
@{
    ViewData["Title"] = "Cars by Brand";
    var requestCulture = ViewContext.HttpContext.Features.Get<Microsoft.AspNetCore.Localization.IRequestCultureFeature>();
    var currentCulture = requestCulture?.RequestCulture.Culture.Name ?? "en";
    var isRtl = currentCulture == "ar";
}

@section Styles {
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #13f1fc 0%, #0470dc 100%);
            --warning-gradient: linear-gradient(135deg, #f9d423 0%, #ff4e50 100%);
            --dark-gradient: linear-gradient(135deg, #232526 0%, #414345 100%);
        }

        .hero-section {
            background: var(--primary-gradient);
            color: white;
            padding: 4rem 0;
            margin-bottom: 3rem;
            border-radius: 0 0 50px 50px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .brand-filter {
            background: white;
            border-radius: 30px;
            padding: 1rem;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            margin-top: -3rem;
            position: relative;
            z-index: 10;
        }

        .brand-logo {
            width: 60px;
            height: 60px;
            object-fit: contain;
            border-radius: 15px;
            padding: 10px;
            background: white;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .brand-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            border-radius: 20px;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
        }

        .brand-item:hover, .brand-item.active {
            background: #f8f9fa;
            transform: translateY(-5px);
        }

        .brand-item:hover .brand-logo {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        }

        .brand-name {
            margin-top: 0.5rem;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .car-card {
            border: none;
            border-radius: 20px;
            overflow: hidden;
            transition: all 0.3s ease;
            height: 100%;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        }

        .car-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        }

        .car-image {
            height: 250px;
            object-fit: cover;
            position: relative;
        }

        .offer-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--warning-gradient);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 30px;
            font-weight: bold;
            font-size: 0.9rem;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .price-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin: 1rem 0;
        }

        .original-price {
            text-decoration: line-through;
            color: #6c757d;
            font-size: 1.1rem;
        }

        .offer-price {
            font-size: 1.5rem;
            font-weight: bold;
            background: var(--success-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .view-details-btn {
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: 30px;
            padding: 0.7rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .view-details-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
            color: white;
        }

        .no-offers {
            background: #f8f9fa;
            padding: 0.3rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            color: #6c757d;
        }

        .feature-list {
            list-style: none;
            padding: 0;
            margin: 1rem 0;
        }

        .feature-list li {
            padding: 0.3rem 0;
            color: #6c757d;
        }

        .feature-list li:before {
            content: "âœ“ ";
            color: #28a745;
            font-weight: bold;
            margin-right: 0.5rem;
        }

        /* RTL Styles */
        @if (isRtl)
        {
            <text>
            .feature-list li:before {
                margin-right: 0;
                margin-left: 0.5rem;
            }

            .brand-filter {
                text-align: right;
            }

            .card-body {
                text-align: right;
            }

            .dropdown-menu {
                text-align: right;
            }
            </text>
        }
    </style>
}

<div class="hero-section">
    <div class="container text-center">
        <h1 class="display-4 fw-bold mb-3">Explore Cars by Brand</h1>
        <p class="lead">Discover amazing deals and special offers on your favorite car brands</p>
    </div>
</div>

<div class="container">
    <!-- Search and Filter Section -->
    <div class="card mb-4" style="margin-top: -2rem; position: relative; z-index: 10;">
        <div class="card-header">
            <h5 class="mb-0">
                <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse">
                    <i class="fas fa-filter"></i> Filters & Search
                </button>
            </h5>
        </div>
        <div id="filterCollapse" class="collapse @(Model.HasActiveFilters ? "show" : "")">
            <div class="card-body">
                <form method="get" class="row g-3" id="filterForm">
                    <div class="col-md-4">
                        <label for="searchTerm" class="form-label">Search</label>
                        <input type="text" class="form-control" id="searchTerm" name="searchTerm" 
                               value="@Model.SearchTerm" placeholder="Make, Model, VIN...">
                    </div>
                    <div class="col-md-2">
                        <label for="year" class="form-label">Year</label>
                        <select class="form-select" id="year" name="year">
                            <option value="">All Years</option>
                            @for (int year = DateTime.Now.Year; year >= 2000; year--)
                            {
                                <option value="@year" selected="@(year == Model.Year)">@year</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="minPrice" class="form-label">Min Price</label>
                        <input type="number" class="form-control" id="minPrice" name="minPrice" 
                               value="@Model.MinPrice" placeholder="0" step="1000">
                    </div>
                    <div class="col-md-2">
                        <label for="maxPrice" class="form-label">Max Price</label>
                        <input type="number" class="form-control" id="maxPrice" name="maxPrice" 
                               value="@Model.MaxPrice" placeholder="100000" step="1000">
                    </div>
                    <div class="col-md-2">
                        <label for="isAvailable" class="form-label">Status</label>
                        <select class="form-select" id="isAvailable" name="isAvailable">
                            <option value="">All</option>
                            <option value="true" selected="@(Model.IsAvailable == true)">Available</option>
                            <option value="false" selected="@(Model.IsAvailable == false)">Sold</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="hasOffer" class="form-label">Offers</label>
                        <select class="form-select" id="hasOffer" name="hasOffer">
                            <option value="">All</option>
                            <option value="true" selected="@(Model.HasOffer == true)">With Offers</option>
                            <option value="false" selected="@(Model.HasOffer == false)">No Offers</option>
                        </select>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i> Search
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="clearFilters">
                            <i class="fas fa-times"></i> Clear
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="brand-filter">
        <div class="row align-items-center">
            <div class="col-12">
                <h5 class="mb-3">Select a Brand</h5>
                <div class="row g-3">
                    <div class="col-6 col-md-3 col-lg-2">
                        <div class="brand-item @(string.IsNullOrEmpty(Model.SelectedBrand) ? "active" : "")" data-brand="">
                            <div class="brand-logo d-flex align-items-center justify-content-center">
                                <span class="text-primary fw-bold">ALL</span>
                            </div>
                            <span class="brand-name">All Brands</span>
                        </div>
                    </div>
                    @foreach (var brand in Model.AllBrands)
                    {
                        <div class="col-6 col-md-3 col-lg-2">
                            <div class="brand-item @(Model.SelectedBrand == brand ? "active" : "")" data-brand="@brand">
                                <img src="@GetBrandLogo(brand)" alt="@brand" class="brand-logo" />
                                <span class="brand-name">@brand</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loading-spinner" class="text-center py-5" style="display: none;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading cars...</p>
    </div>

    <!-- Cars Grid Container -->
    <div id="cars-grid-container" class="mt-5">
        @await Html.PartialAsync("_BrandShowcaseGrid", Model)
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        $(document).ready(function () {
            let currentFilters = {};
            
            // Initialize filters from current values
            function getFilters() {
                return {
                    searchTerm: $('#searchTerm').val(),
                    selectedBrand: currentFilters.selectedBrand || '@Model.SelectedBrand',
                    year: $('#year').val(),
                    minPrice: $('#minPrice').val(),
                    maxPrice: $('#maxPrice').val(),
                    isAvailable: $('#isAvailable').val(),
                    hasOffer: $('#hasOffer').val(),
                    pageNumber: currentFilters.pageNumber || 1,
                    sortBy: currentFilters.sortBy || '@Model.SortBy',
                    sortDescending: currentFilters.sortDescending || '@Model.SortDescending'
                };
            }

            // Load cars with AJAX
            function loadCars(filters) {
                $('#loading-spinner').show();
                $('#cars-grid-container').fadeOut(200);

                $.ajax({
                    url: '/Cars/BrandShowcase',
                    type: 'GET',
                    data: filters,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function (data) {
                        $('#cars-grid-container').html(data).fadeIn(200);
                        $('#loading-spinner').hide();
                        attachEventHandlers();
                        updateUrl(filters);
                    },
                    error: function () {
                        $('#loading-spinner').hide();
                        alert('Error loading cars. Please try again.');
                    }
                });
            }

            // Update URL without page refresh
            function updateUrl(filters) {
                const params = new URLSearchParams();
                Object.keys(filters).forEach(key => {
                    if (filters[key]) {
                        params.append(key, filters[key]);
                    }
                });
                const newUrl = window.location.pathname + '?' + params.toString();
                window.history.pushState({ filters: filters }, '', newUrl);
            }

            // Attach event handlers to dynamic content
            function attachEventHandlers() {
                // Pagination links
                $('.page-nav').off('click').on('click', function (e) {
                    e.preventDefault();
                    currentFilters.pageNumber = $(this).data('page');
                    loadCars(currentFilters);
                });

                // Sort links
                $('.sort-link').off('click').on('click', function (e) {
                    e.preventDefault();
                    const sortBy = $(this).data('sort');
                    if (sortBy === currentFilters.sortBy) {
                        currentFilters.sortDescending = currentFilters.sortDescending === 'True' ? 'False' : 'True';
                    } else {
                        currentFilters.sortBy = sortBy;
                        currentFilters.sortDescending = 'False';
                    }
                    currentFilters.pageNumber = 1;
                    loadCars(currentFilters);
                });

                // Clear filters link in empty state
                $('#clear-filters').off('click').on('click', function (e) {
                    e.preventDefault();
                    $('#filterForm')[0].reset();
                    currentFilters = getFilters();
                    currentFilters.selectedBrand = '';
                    loadCars(currentFilters);
                });
            }

            // Filter form submit
            $('#filterForm').on('submit', function (e) {
                e.preventDefault();
                currentFilters = getFilters();
                currentFilters.pageNumber = 1;
                loadCars(currentFilters);
            });

            // Clear filters button
            $('#clearFilters').on('click', function () {
                $('#filterForm')[0].reset();
                currentFilters = {};
                currentFilters.selectedBrand = '';
                currentFilters.pageNumber = 1;
                $('.brand-item').removeClass('active');
                $('.brand-item[data-brand=""]').addClass('active');
                loadCars(getFilters());
            });

            // Brand selection
            $('.brand-item').on('click', function () {
                const brand = $(this).data('brand');
                currentFilters.selectedBrand = brand;
                currentFilters.pageNumber = 1;
                
                // Update active state
                $('.brand-item').removeClass('active');
                $(this).addClass('active');
                
                loadCars(getFilters());
            });

            // Handle browser back/forward
            window.addEventListener('popstate', function (e) {
                if (e.state && e.state.filters) {
                    currentFilters = e.state.filters;
                    loadCars(currentFilters);
                }
            });

            // Initialize
            currentFilters = getFilters();
            attachEventHandlers();
        });
    </script>
}

@functions {
    private string GetBrandLogo(string brand)
    {
        var brandLogos = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            ["Toyota"] = "https://www.carlogos.org/car-logos/toyota-logo-2020-europe.png",
            ["Honda"] = "https://www.carlogos.org/car-logos/honda-logo-2000.png",
            ["Ford"] = "https://www.carlogos.org/car-logos/ford-logo-2017.png",
            ["Chevrolet"] = "https://www.carlogos.org/car-logos/chevrolet-logo-2020.png",
            ["BMW"] = "https://www.carlogos.org/car-logos/bmw-logo-2020-white.png",
            ["Mercedes-Benz"] = "https://www.carlogos.org/car-logos/mercedes-benz-logo-2020.png",
            ["Audi"] = "https://www.carlogos.org/car-logos/audi-logo-2016.png",
            ["Volkswagen"] = "https://www.carlogos.org/car-logos/volkswagen-logo-2019.png",
            ["Nissan"] = "https://www.carlogos.org/car-logos/nissan-logo-2020.png",
            ["Mazda"] = "https://www.carlogos.org/car-logos/mazda-logo-2018.png",
            ["Hyundai"] = "https://www.carlogos.org/car-logos/hyundai-logo-2017.png",
            ["Kia"] = "https://www.carlogos.org/car-logos/kia-logo-2021.png",
            ["Tesla"] = "https://www.carlogos.org/car-logos/tesla-logo.png",
            ["Porsche"] = "https://www.carlogos.org/car-logos/porsche-logo-2014.png",
            ["Lexus"] = "https://www.carlogos.org/car-logos/lexus-logo-2013.png"
        };

        return brandLogos.ContainsKey(brand) 
            ? brandLogos[brand] 
            : "https://via.placeholder.com/150?text=" + Uri.EscapeDataString(brand);
    }
}